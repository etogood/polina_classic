import asyncio
import logging
import calendar

from contextlib import suppress
from datetime import datetime, timedelta

from aiogram import types, F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from pydantic import ValidationError

import db
import kb
import re
from env import *

basic_router = Router()
admin_id = [...]

#–≤—ã–∑–æ–≤, –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è —Å—Ç–∞—Ä—Ç, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∫–Ω–æ–ø–∫–∏ - –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç, –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–∞—Ä—Ç) –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –î–û–î–∞
@basic_router.message(Command('start'))
async def commands_start(message: types.Message):
    user_id = message.from_user.id
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute('INSERT INTO classic_users (user_id, timestamp) VALUES (?, ?)', (user_id, timestamp))
    conn.commit()

    await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç¬ª, –∫–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.', reply_markup=kb.startkb)


#–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞
@basic_router.message(Command('restart'))
async def commands_restart(message: types.Message):
    await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç¬ª, –∫–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.', reply_markup=kb.startkb)

@basic_router.message(Command('url'))
async def commands_url(message: types.Message):
    await message.answer('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞\n(‚ïÆ¬∞-¬∞)‚ïÆ‚î≥‚îÅ‚î≥       (‚ïØ¬∞‚ñ°¬∞)‚ïØÔ∏µ ‚îª‚îÅ‚îª ')

@basic_router.message(Command('commands'))
async def send_commands(message: types.Message):
    if message.from_user.id in admin_id: 
        commands_text = "–ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤—Ç–∞—å—Å—è:\n\n/users - –£–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n/url - –£–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–µ—Ä–µ—à–µ–¥—à–∏—Ö –ø–æ —Å—Å—ã–ª–∫–µ"
    else:
        commands_text = "–ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤—Ç–∞—å—Å—è:\n\n/description - –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞\n/restart - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞\n/newroute - –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç"
    
    await message.answer(commands_text)

#–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–æ—Ç–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
@basic_router.message(Command('users'))
async def get_users_stat(message: types.Message):
    #–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ —Å–∞–º—ã—Ö —Ä–∞–Ω–Ω–∏—Ö –∏ –ø–æ–∑–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT MIN(timestamp), MAX(timestamp) FROM classic_users')
    start_time_str, end_time_str = cursor.fetchone()
    start_time = datetime.fromisoformat(start_time_str)#–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –≤ –æ–±—ä–µ–∫—Ç—ã datetime 
    end_time = datetime.fromisoformat(end_time_str)

    total_users = await db.count_users_stat(start_time_str, end_time_str)#—Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–æ—Ç —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î –¥–æ —Å–∞–º–æ–π –ø–æ–∑–¥–Ω–µ–π) 

    current_month = start_time.replace(day=1)#–∑–∞–¥–∞—ë–º –Ω–∞—á–∞–ª—å–Ω—ã–π –º–µ—Å—è—Ü
    response_text = f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥: {total_users}\n\n'

    months = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']

    while current_month <= end_time:
        month_start = current_month
        month_name = months[current_month.month - 1] #–∑–∞–¥–∞—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞  
        if current_month.month == 12: 
            month_end = current_month.replace(year=current_month.year + 1, month=1, day=1) - timedelta(seconds=1)
        else:
            month_end = current_month.replace(month=current_month.month + 1) - timedelta(seconds=1)

        users_month = await db.count_users_month(month_start, month_end) #—Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        response_text += f'–∑–∞ {month_name} {current_month.year}: {users_month}\n'

        current_month = month_end + timedelta(seconds=1)  #–ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É

    await message.answer(response_text, parse_mode=ParseMode.HTML)

@basic_router.message(Command('results'))
async def results(message: types.Message):
    user_id = message.from_user.id
    if user_id in poll_results:
        total = poll_results[user_id].options
        await message.answer(f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:\n {total} ')
    else:
        await message.answer('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã')

#—ç—Ç–∞ —à—Ç—É—á–∫–∞ –Ω—É–∂–Ω–∞, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º—ë—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±–æ—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É (–ø–æ —Ñ–∞–∫—Ç—É –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç)
@basic_router.message(Command('newroute'))
async def commands_start(message: types.Message):
    await message.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç¬ª, –æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞:", reply_markup=kb.startkb)

#–≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
@basic_router.message(F.text == '–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç üìå')
async def url_command(message : types.Message):
	await message.answer('–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?  üëÄ', reply_markup=kb.urlkb)

@basic_router.message(F.text == '–ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏ ‚úâ')
async def url_command(message : types.Message):
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü—Å–µ—Ç—å',
        reply_markup=kb.builder)

#–∫–æ–º–∞–Ω–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞
@basic_router.message(Command('description'))
async def cmd_description(message: types.Message):
    description_file = f'descriptions_language_ru.txt'
    try:
        with open(description_file, 'r', encoding='utf-8') as file:
            description = file.read()
            await message.answer(description, parse_mode="HTML")
            await message.answer('üïä')
    except FileNotFoundError:
        logging.error(f'–§–∞–π–ª {description_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')

#–≤—ã–≤–æ–¥ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏ –ö–ê–ú–ü–£–°–ê
@basic_router.callback_query(F.data == 'campus')
async def handle_tok1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ö–∞–∫–æ–π –∫–∞–º–ø—É—Å –í–∞–º –Ω—É–∂–µ–Ω?', reply_markup=kb.mapcampus)

#–≤—ã–≤–æ–¥ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏ –¢–û–ß–ö–ê –ò–ù–¢–ï–†–ï–°–ê
@basic_router.callback_query(F.data == 'pointinterest')
async def v2_call(callback : types.CallbackQuery):
	await callback.message.answer('–ü–æ –∫–∞–∫–æ–º—É –∞–¥—Ä–µ—Å—É –í—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?', reply_markup=kb.map_pointinterest)
	await callback.answer()

#–≤—ã–≤–æ–¥ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏ –ê–£–î–ò–¢–û–†–ò–ò
@basic_router.callback_query(F.data == 'auditorium')
async def first_function(callback : types.CallbackQuery):
  await callback.message.answer('‚ùï–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–Ω –≤ –í–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.\n\n–ù–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±–æ–∑–Ω–∞—á–∞—é—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø—É—Å–∞, –∞ —Ç–∞–∫–∂–µ —á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (4 —Ü–∏—Ñ—Ä—ã)\n\n‚ùï<u>–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞</u>:  –ê–≤1407 \n"–ê–≤"- –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–º–ø—É—Å–∞ –Ω–∞ –ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–æ–π,\n"1" - –∫–æ—Ä–ø—É—Å, "4" - —ç—Ç–∞–∂, "07" - –∞—É–¥–∏—Ç–æ—Ä–∏—è.\n(–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–µ—Ä–≤—ã–π –∫–æ—Ä–ø—É—Å –Ω–∞ —É–ª.–ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∞—è)', parse_mode="HTML")
  await callback.answer()

@basic_router.message()
async def second_function(message: types.Message):
    room = message.text.strip().upper() #–ø—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏

    query = "SELECT infa, fotka FROM Auditoriums WHERE room_number = ?"
    cursor.execute(query, (room,))
    row = cursor.fetchone()

    if re.match(r'^[–∞-—è–ê-–Ø]{1,2}\d{3,4}[–∞-—è–ê-–Ø]?$', room): #1-2 –±—É–∫–≤—ã –∏ 3-4 —Ü–∏—Ñ—Ä—ã
        if row is not None:
            infa, fotka = row
            await message.reply(f"{infa}")
            await message.answer_photo(photo=fotka)
        else:
            await message.reply(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ –¥–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ {room} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    '''else:
        await message.answer('–ù–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –±—ã–ª –≤–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')'''


#–¢–æ—á–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –Ω–∞ –ë–°
@basic_router.callback_query(F.data == 'pointinterestBS')
async def w1_call(callback : types.CallbackQuery):
	await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–º–ø—É—Å –Ω–∞ –ë–æ–ª—å—à–æ–π –°–µ–º—ë–Ω–æ–≤—Å–∫–æ–π\n"–ë–°"-–æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –í–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.')
	await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å:', reply_markup=kb.map_BS)
	await callback.answer()


#–¢–æ—á–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –Ω–∞ –ê–≤
@basic_router.callback_query(F.data == 'pointinterestAv')
async def w1_call(callback : types.CallbackQuery):
	await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–º–ø—É—Å –Ω–∞ –ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–æ–π\n"–ê–≤"-–æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –í–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.')
	'''await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å:', reply_markup=kb.map_BS)'''
	await callback.answer()

#–¢–æ—á–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –Ω–∞ –ú
@basic_router.callback_query(F.data == 'pointinterestM')
async def w1_call(callback : types.CallbackQuery):
	await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–º–ø—É—Å –Ω–∞ –ú–∏—Ö–∞–ª–æ–∫–æ–≤—Å–∫–æ–π\n"–ú"-–æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –í–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.')
	'''await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å:', reply_markup=kb.map_BS)'''
	await callback.answer()

#–¢–æ—á–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –Ω–∞ –ü—Ä
@basic_router.callback_query(F.data == 'pointinterestPr')
async def w1_call(callback : types.CallbackQuery):
	await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–º–ø—É—Å –Ω–∞ –ü—Ä—è–Ω–∏—à–∫–æ–≤–∞\n"–ü—Ä"-–æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –í–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.')
	'''await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å:', reply_markup=kb.map_BS)'''
	await callback.answer()

#–¢–æ—á–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –Ω–∞ –ü–ö
@basic_router.callback_query(F.data == 'pointinterestPK')
async def w1_call(callback : types.CallbackQuery):
	await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–º–ø—É—Å –Ω–∞ –ü–∞–≤–ª–∞ –ö–æ—Ä—á–∞–≥–∏–Ω–∞\n"–ü–ö"-–æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –í–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.')
	'''await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å:', reply_markup=kb.map_BS)'''
	await callback.answer()



